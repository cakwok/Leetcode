'''
Algorithm to determine if a graph is bipartite by Breadth first search
'''
class Solution(object):

    def isBipartite(self, graph):

        self.graph = graph
        color = ["white"] * len(self.graph)    #initialize all vertices colors

        color[0] = "red"                       #process first vertice
        queue = []                                  #initialize queue
        queue.append([0,graph[0]])                      #append first vertice to enqueue
        currentIndex = 0

        while queue:

            u = queue.pop()

            print ("queue popped u:", u[0], "current index ", currentIndex)

            for vertices in u[1]:
                if color[vertices] == "white" and color[u[0]] == "red" :
                    color[vertices] = "blue"
                    queue.append([currentIndex + 1,graph[vertices]])
                    print ("queue appended: ", graph[vertices], "vertices", vertices)

                elif color[vertices] == "white" and color[u[0]] == "blue" :
                    color[vertices] = "red"
                    queue.append([currentIndex + 1,graph[vertices]])
                    print ("queue appended: ", graph[vertices], "vertices", vertices)

                elif color[vertices] == "red" and color[u[0]] == "red" :
                    return False                                 #if color could not be put adjacently, that means the graph is not bipartite

                elif color[vertices] == "blue" and color[u[0]] == "blue" :
                    return False

                print (color)

            currentIndex += 1
        return True

graph = [[1,3],[0,2],[1,3],[0,2]]
c = Solution()
print(c.isBipartite(graph))
